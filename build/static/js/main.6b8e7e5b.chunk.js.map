{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","axios","get","then","response","data","newObject","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","notesToShow","filter","useEffect","noteService","initialNotes","toggleImportanceOf","find","changedNote","returnedNote","map","catch","error","alert","n","key","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","concat","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"kMAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACE,4BACGH,EAAKI,QACN,4BAAQC,QAASJ,GAAmBC,K,gBCU3B,EAfA,WAEb,OADgBI,IAAMC,IAHR,cAICC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAa5B,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KARR,aAQsBD,GACrBH,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAQ5B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAbF,aAaE,YAAwBD,GAAMF,GAC/BH,KAAK,SAAAC,GAAQ,OAAIA,EAASC,Q,4NCX3C,IA4EeK,EA5EH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,iBAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,KAKVC,EAAcF,EAChBJ,EACAA,EAAMO,OAAO,SAAAxB,GAAI,OAAuB,IAAnBA,EAAKG,YAE9BsB,oBAAU,WACRC,IAAqBlB,KAAK,SAAAmB,GACxBT,EAASS,MAEV,IAEH,IAAMC,EAAqB,SAAAf,GACzB,IAAMb,EAAOiB,EAAMY,KAAK,SAAA7B,GAAI,OAAIA,EAAKa,KAAOA,IACtCiB,E,qVAAW,IAAQ9B,EAAR,CAAcG,WAAYH,EAAKG,YAEhDuB,EACUb,EAAIiB,GACXtB,KAAK,SAAAuB,GACJb,EAASD,EAAMe,IAAI,SAAAhC,GAAI,OAAKA,EAAKa,KAAOA,EAAKb,EAAO+B,OAErDE,MAAM,SAAAC,GACLC,MAAM,aAAD,OAAcnC,EAAKI,QAAnB,sCACLc,EAASD,EAAMO,OAAO,SAAAY,GAAC,OAAIA,EAAEvB,KAAOA,QAiC1C,OACE,6BACE,qCACA,6BACE,4BAAQR,QAAS,kBAAMiB,GAAYD,KAAnC,QACQA,EAAU,aAAe,QAGnC,4BApCFE,EAAYS,IAAI,SAAAhC,GAAI,OAClB,kBAAC,EAAD,CACEqC,IAAKrC,EAAKa,GACVb,KAAMA,EACNC,iBAAkB,kBAAM2B,EAAmB5B,EAAKa,UAiClD,0BAAMyB,SA7BM,SAAAC,GACdA,EAAMC,iBACN,IAAMC,EAAa,CACjBrC,QAASe,EACTuB,MAAM,IAAIC,MAAOC,YACjBzC,UAAW0C,KAAKC,SAAW,GAC3BjC,GAAII,EAAM8B,OAAS,GAGrBrB,EAAmBe,GAAYjC,KAAK,SAAAuB,GAClCb,EAASD,EAAM+B,OAAOjB,IACtBX,EAAW,QAmBT,2BAAO6B,MAAO9B,EAAS+B,SAfJ,SAAAX,GACvBY,QAAQC,IAAIb,EAAMc,OAAOJ,OACzB7B,EAAWmB,EAAMc,OAAOJ,UAcpB,4BAAQK,KAAK,UAAb,WCtERC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.6b8e7e5b.chunk.js","sourcesContent":["import React from 'react';\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? 'make not important' : 'make important';\n\n  return (\n    <li>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\n\nexport default Note;\n","import axios from 'axios';\nconst baseUrl = '/api/notes';\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then(response => response.data);\n};\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then(response => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then(response => response.data);\n};\n\nexport default {\n  getAll,\n  create,\n  update\n};\n","import React, { useState, useEffect } from 'react';\nimport Note from './components/Note';\nimport noteService from './services/notes';\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('a new note...');\n  const [showAll, setShowAll] = useState(true);\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true);\n\n  useEffect(() => {\n    noteService.getAll().then(initialNotes => {\n      setNotes(initialNotes);\n    });\n  }, []);\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(note => note.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => (note.id !== id ? note : returnedNote)));\n      })\n      .catch(error => {\n        alert(`the note '${note.content}' was already deleted from server`);\n        setNotes(notes.filter(n => n.id !== id));\n      });\n  };\n\n  const rows = notes =>\n    notesToShow.map(note => (\n      <Note\n        key={note.id}\n        note={note}\n        toggleImportance={() => toggleImportanceOf(note.id)}\n      />\n    ));\n\n  const addNote = event => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString,\n      important: Math.random() > 0.5,\n      id: notes.length + 1\n    };\n\n    noteService.create(noteObject).then(returnedNote => {\n      setNotes(notes.concat(returnedNote));\n      setNewNote('');\n    });\n  };\n\n  const handleNoteChange = event => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  };\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'imporrtant' : 'all'}\n        </button>\n      </div>\n      <ul>{rows(notes)}</ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}